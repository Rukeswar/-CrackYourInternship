//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.io.*;
import java.lang.*;

class GFG{
	public static void main(String [] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int test = Integer.parseInt(br.readLine());
		while(test-- > 0) {
			int n = Integer.parseInt(br.readLine());
			int [] arr = new int[n];
			String [] str = br.readLine().trim().split(" ");
			for(int i = 0; i < n; i++)
				arr[i] = Integer.parseInt(str[i]);
			Solution ob = new Solution();
			int [] ans = ob.nearestSmallestTower(arr);
			for(int i = 0; i < n; i++)
				System.out.print(ans[i]+" ");
			System.out.println();
		}
		
	}
}
// } Driver Code Ends


//User function Template for Java


class Solution{
	int [] nearestSmallestTower(int [] arr){
		//Write your code here
		//List<int> result = new List<int>(arr.Length);
        int n = arr.length;
        int[] left = new int[n];
        int[] right = new int[n];
        Arrays.fill(left, -1);
        Arrays.fill(right, -1);

        // Stack for finding the nearest smaller elements to the left
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                left[i] = stack.peek();
            }
            stack.push(i);
        }

        // Clear the stack for the next use
        stack.clear();

        // Stack for finding the nearest smaller elements to the right
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                right[i] = stack.peek();
            }
            stack.push(i);
        }

        // Prepare the result array
        int[] result = new int[n];
        for (int i = 0; i < n; i++) {
            if (left[i] == -1 && right[i] == -1) {
                result[i] = -1;
            } else if (left[i] == -1) {
                result[i] = right[i];
            } else if (right[i] == -1) {
                result[i] = left[i];
            } else {
                int distLeft = i - left[i];
                int distRight = right[i] - i;
                if (distLeft < distRight || (distLeft == distRight && arr[left[i]] <= arr[right[i]])) {
                    result[i] = left[i];
                } else {
                    result[i] = right[i];
                }
            }
        }

        return result;
	}
}